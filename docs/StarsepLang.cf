-- Programs ------------------------------------------------

entrypoints   Program ;
ProgramDecl.  Program ::= [TopDef] ;
FnDef.	      TopDef ::= Type Ident "(" [Arg] ")" Block ;
separator     nonempty TopDef "" ;
ArgDecl.      Arg ::= Type Ident ;
separator     Arg "," ;

-- Statements ----------------------------------------------

BlockDecl. Block ::= "{" [Stmt] "}" ;
BStmt.     Stmt ::= Block ;
separator  Stmt "" ;

Decl.      Oper ::= Type [Item] ;
NoInit.    Item ::= Ident ;
Init.      Item ::= Ident "=" Expr ;
separator nonempty Item "," ;
Let.       Oper ::= "let" Ident "=" Expr ;
Ass.       Oper ::= Ident AssOp Expr ;
Incr.      Oper ::= Ident "++" ;
Decr.      Oper ::= Ident "--" ;
Ret.       Oper ::= "return" Expr ;
VRet.      Oper ::= "return" ;
FunExec.   Oper ::= Ident "(" [Expr] ")" ;
terminator Oper ";" ;

OperStmt.  Stmt ::= Oper ";" ;
While.     Stmt ::= "while" Expr Block ;
For.       Stmt ::= "for" Oper ";" Expr ";" Oper Block ;
Loop.      Stmt ::= "loop" Block ;

CondElif.  IfStmt ::= IfStmt "elif" Expr Block;
CondElse.  IfElseStmt ::= IfStmt "else" Block ;
Cond.      IfStmt ::= "if" Expr Block ;

CondIf.    Stmt   ::= IfStmt ;
ElseStmt.  Stmt   ::= IfElseStmt ;

-- Types ---------------------------------------------------

Int.       Type ::= "int" ;
Str.       Type ::= "string" ;
Bool.      Type ::= "bool" ;
Void.      Type ::= "void" ;
TypeOf.    Type ::= "typeof" "(" Expr ")" ;
internal   Fun. Type ::= Type "(" [Type] ")" ;
separator  Type "," ;

-- Expressions ---------------------------------------------

FunExpr.   Expr7 ::= Ident "(" [Expr] ")" ;
EInt.      Expr6 ::= Integer ;
EString.   Expr6 ::= String ;
EFalse.    Expr6 ::= "false" ;
ETrue.     Expr6 ::= "true" ;
Neg.       Expr5 ::= "-" Expr6 ;
Not.       Expr5 ::= "!" Expr6 ;
EMul.      Expr4 ::= Expr4 MulOp Expr5 ;
EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;
ERel.      Expr2 ::= Expr2 RelOp Expr3 ;
EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;
EOr.       Expr  ::= Expr1 "||" Expr ;

coercions  Expr 7 ;
separator  Expr "," ;

-- Operators -----------------------------------------------

Plus.      AddOp ::= "+" ;
Minus.     AddOp ::= "-" ;
Times.     MulOp ::= "*" ;
Div.       MulOp ::= "/" ;
Mod.       MulOp ::= "%" ;
LTH.       RelOp ::= "<" ;
LE.        RelOp ::= "<=" ;
GTH.       RelOp ::= ">" ;
GE.        RelOp ::= ">=" ;
EQU.       RelOp ::= "==" ;
NE.        RelOp ::= "!=" ;
Assign.    AssOp ::= "=" ;
PlusAss.   AssOp ::= "+=" ;
MinusAss.  AssOp ::= "-=" ;
MulAss.    AssOp ::= "*=" ;
DivAss.    AssOp ::= "/=" ;
ModAss.    AssOp ::= "%=" ;

-- Comments ------------------------------------------------

comment    "#" ;
comment    "//" ;
comment    "/*" "*/" ;
