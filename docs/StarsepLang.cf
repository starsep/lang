-- Programs ------------------------------------------------

entrypoints   Program, Expr ;
ProgramDecl.  Program ::= [TopDef] ;
FnDef.	      TopDef ::= Type Ident "(" [Arg] ")" Block ;
separator     nonempty TopDef "" ;
ArgDecl. 	    Arg ::= Type Ident ;
separator     Arg "," ;

-- Statements ----------------------------------------------

BlockDecl. Block ::= "{" [Stmt] "}" ;
separator  Stmt ";" ;
BStmt.     Stmt ::= Block ;
Decl.      Stmt ::= Type [Item] ";" ;
NoInit.    Item ::= Ident ;
Init.      Item ::= Ident "=" Expr ;
separator nonempty Item "," ;
Ass.       Stmt ::= Ident "=" Expr  ";" ;
Incr.      Stmt ::= Ident "++"  ";" ;
Decr.      Stmt ::= Ident "--"  ";" ;
Ret.       Stmt ::= "return" Expr ";" ;
VRet.      Stmt ::= "return" ";" ;
Cond.      Stmt ::= "if" "(" Expr ")" Block  ;
CondElse.  Stmt ::= "if" "(" Expr ")" Block "else" Block  ;
While.     Stmt ::= "while" "(" Expr ")" Block ;
-- SExp.      Stmt ::= Expr  ";" ;

-- Built-in functions --------------------------------------

Print.     Stmt ::= "print" "(" Expr ")" ;

-- Types ---------------------------------------------------

Int.       Type ::= "int" ;
Str.       Type ::= "string" ;
Bool.      Type ::= "boolean" ;
Void.      Type ::= "void" ;
internal   Fun. Type ::= Type "(" [Type] ")" ;
separator  Type "," ;

-- Expressions ---------------------------------------------

EOr.       Expr ::= Expr1 "||" Expr ;
EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;
ERel.      Expr2 ::= Expr2 RelOp Expr3 ;
EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;
EMul.      Expr4 ::= Expr4 MulOp Expr5 ;
Not.       Expr5 ::= "!" Expr6 ;
Neg.       Expr5 ::= "-" Expr6 ;
EString.   Expr6 ::= String ;
EFalse.    Expr6 ::= "false" ;
ETrue.     Expr6 ::= "true" ;
EInt.      Expr6 ::= Integer ;

coercions  Expr 6 ;
separator  Expr "," ;

-- Operators -----------------------------------------------

Plus.      AddOp ::= "+" ;
Minus.     AddOp ::= "-" ;
Times.     MulOp ::= "*" ;
Div.       MulOp ::= "/" ;
Mod.       MulOp ::= "%" ;
LTH.       RelOp ::= "<" ;
LE.        RelOp ::= "<=" ;
GTH.       RelOp ::= ">" ;
GE.        RelOp ::= ">=" ;
EQU.       RelOp ::= "==" ;
NE.        RelOp ::= "!=" ;

-- Comments ------------------------------------------------

comment    "#" ;
comment    "//" ;
comment    "/*" "*/" ;
