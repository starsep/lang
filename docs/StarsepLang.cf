-- Programs ------------------------------------------------

entrypoints   Program ;
Program.      Program ::= [FnDef] ;

FnDef.	      FnDef ::= Type Ident "(" [Arg] ")" Block ;
separator nonempty FnDef "" ;

Arg.          Arg ::= Type Ident ;
separator Arg "," ;

-- Function Execution -------------------------------------------------

FunExec.      FunExec ::= Ident "(" [Expr] ")" ;

-- Statements ----------------------------------------------

Block.        Block ::= "{" [Stmt] "}" ;
BStmt.        Stmt ::= Block ;
separator     Stmt "" ;

Decl.         Oper ::= Type [Item] ;
NoInit.       Item ::= Ident ;
Init.         Item ::= Ident "=" Expr ;
separator nonempty Item "," ;

Let.          Oper ::= "let" [Item] ;
Auto.         Oper ::= "auto" [Item] ;
Ass.          Oper ::= Ident AssOp Expr ;
Incr.         Oper ::= Ident "++" ;
Decr.         Oper ::= Ident "--" ;
Ret.          Oper ::= "return" Expr ;
VRet.         Oper ::= "return" ;
FnExec.       Oper ::= FunExec ;
Print.        Oper ::= "print" "(" Expr ")" ;
Assert.       Oper ::= "assert" "(" Expr ")" ;

OperStmt.     Stmt ::= Oper ";" ;
While.        Stmt ::= "while" Expr Block ;
For.          Stmt ::= "for" Oper ";" Expr ";" Oper Block ;
Foreach.      Stmt ::= "for" Ident "in" Expr Block ;
Loop.         Stmt ::= "loop" Block ;

IfElifStmt.    IfStmt ::= IfStmt "elif" Expr Block;
IfElseStmt.    IfElseStmt ::= IfStmt "else" Block ;
IfStmt.        IfStmt ::= "if" Expr Block ;

CondIf.       Stmt   ::= IfStmt ;
ElseStmt.     Stmt   ::= IfElseStmt ;

-- Types ---------------------------------------------------

Int.          Type ::= "int" ;
Char.         Type ::= "char" ;
Str.          Type ::= "string" ;
Bool.         Type ::= "bool" ;
Float.        Type ::= "float" ;
Void.         Type ::= "void" ;
FnType.       Type ::= "fn" "<" [Type] ">" ;
ListT.        Type ::= "list" "<" Type ">" ;
separator nonempty Type "->" ;

-- Expressions ---------------------------------------------

EFunExec.     Expr8 ::= FunExec ;
EList.        Expr8 ::= Type "[" [Expr] "]" ;
EVar.         Expr8 ::= Ident ;
EInt.         Expr8 ::= Integer ;
EChar.        Expr8 ::= Char ;
EFloat.       Expr8 ::= Double ;
EString.      Expr8 ::= String ;
EFalse.       Expr8 ::= "false" ;
ETrue.        Expr8 ::= "true" ;
ENeg.         Expr7 ::= "-" Expr8 ;
ENot.         Expr7 ::= "!" Expr8 ;
EMul.         Expr6 ::= Expr6 MulOp Expr7 ;
EAdd.         Expr5 ::= Expr5 AddOp Expr6 ;
EJoin.        Expr4 ::= Expr5 "++" Expr4 ;
EAppend.      Expr4 ::= Expr5 "$" Expr4 ;
ERel.         Expr3 ::= Expr3 RelOp Expr4 ;
EAnd.         Expr2 ::= Expr3 "&&" Expr2 ;
EOr.          Expr1 ::= Expr2 "||" Expr1 ;
ETernary.     Expr  ::= Expr1 "?" Expr1 ":" Expr1 ;

coercions     Expr 8 ;
separator     Expr "," ;

-- Operators -----------------------------------------------

Plus.         AddOp ::= "+" ;
Minus.        AddOp ::= "-" ;
Times.        MulOp ::= "*" ;
Div.          MulOp ::= "/" ;
Mod.          MulOp ::= "%" ;
LTH.          RelOp ::= "<" ;
LE.           RelOp ::= "<=" ;
GTH.          RelOp ::= ">" ;
GE.           RelOp ::= ">=" ;
EQU.          RelOp ::= "==" ;
NE.           RelOp ::= "!=" ;
Assign.       AssOp ::= "=" ;
PlusAss.      AssOp ::= "+=" ;
MinusAss.     AssOp ::= "-=" ;
MulAss.       AssOp ::= "*=" ;
DivAss.       AssOp ::= "/=" ;
ModAss.       AssOp ::= "%=" ;

-- Comments ------------------------------------------------

comment       "#" ;
comment       "//" ;
comment       "/*" "*/" ;
